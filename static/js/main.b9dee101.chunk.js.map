{"version":3,"sources":["MetaTable.js","App.js","serviceWorker.js","index.js"],"names":["skipSet","Set","MetaTable","data","className","Object","entries","map","i","key","value","has","JSON","stringify","videoFile","process","App","React","useState","demuxer","setDemuxer","useEffect","fetch","then","res","arrayBuffer","buffer","JsWebm","queueData","eof","demux","console","log","catch","controls","src","videoFormat","docType","audioCodec","videoPackets","length","audioPackets","segmentInfo","cues","tracks","trackEntries","trackEntry","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6OAEMA,EAAU,IAAIC,IAAI,CAAC,UAAW,gBAAiB,iBAAkB,YAqCxDC,EAnCG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAChB,oCACE,2BAAOC,UAAU,iBACf,+BACE,4BACE,qCACA,sCAEDC,OAAOC,QAAQH,GAAMI,KAAI,WAAeC,GAAO,IAAD,mBAAnBC,EAAmB,KAAdC,EAAc,KAC7C,OAAIV,EAAQW,IAAIF,GAAa,KACR,iBAAVC,GAA+B,OAAVA,EACX,kBAAVA,EAEP,wBAAID,IAAKD,GACP,4BAAKC,GACL,4BACE,6BACGG,KAAKC,UAAUH,EAAO,KAAM,MAOrC,wBAAID,IAAKD,GACP,4BAAKC,GACL,4BAAKC,SAhBT,SCRJI,EAAS,UAAMC,eAAN,iCA0FAC,MAxFf,WAAgB,IAAD,EACiBC,IAAMC,SAAS,MADhC,mBACNC,EADM,KACGC,EADH,KA+Eb,OA5EAH,IAAMI,WAAU,WACdC,MAAMR,GACHS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,iBAChBF,MAAK,SAACG,GACL,IAAMP,EAAU,IAAIQ,IAEpB,IADAR,EAAQS,UAAUF,IACVP,EAAQU,KACdV,EAAQW,QAEVC,QAAQC,IAAIb,GACZC,EAAWD,MAEZc,MAAMF,QAAQC,OAChB,IAgED,yBAAK5B,UAAU,OACb,sCACA,gDACCe,EAvDH,oCACE,2BAAOe,UAAQ,GACb,4BAAQC,IAAKrB,KAEf,2CACA,6BACE,2BAAOV,UAAU,iBACf,+BACE,4BACE,qCACA,sCAEF,4BACE,2CACA,4BACE,6BACGQ,KAAKC,UAAUM,EAAQiB,YAAa,KAAM,MAIjD,4BACE,uCACA,4BAAKjB,EAAQkB,UAEf,4BACE,0CACA,4BAAKlB,EAAQmB,aAEf,4BACE,4CACA,4BAAKnB,EAAQoB,aAAaC,SAE5B,4BACE,4CACA,4BAAKrB,EAAQsB,aAAaD,WAIhC,6CACA,6BACE,kBAAC,EAAD,CAAWrC,KAAMgB,EAAQuB,eAE3B,qCACA,6BACE,kBAAC,EAAD,CAAWvC,KAAMgB,EAAQwB,QArD/B,oCACE,uCACCxB,EAAQyB,OAAOC,aAAatC,KAAI,SAACuC,EAAYtC,GAAb,OAC/B,kBAAC,EAAD,CAAWC,IAAKD,EAAGL,KAAM2C,UA6DE,eC/EfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.b9dee101.chunk.js","sourcesContent":["import React from 'react';\n\nconst skipSet = new Set(['demuxer', 'dataInterface', 'currentElement', 'entries']);\n\nconst MetaTable = ({ data }) => (\n  <>\n    <table className=\"demuxer-table\">\n      <tbody>\n        <tr>\n          <th>State</th>\n          <th>Value</th>\n        </tr>\n        {Object.entries(data).map(([key, value], i) => {\n          if (skipSet.has(key)) return null;\n          if (typeof value === 'array' || value === null) return;\n          if (typeof value === 'object') {\n            return (\n              <tr key={i}>\n                <td>{key}</td>\n                <td>\n                  <pre>\n                    {JSON.stringify(value, null, 2)}\n                  </pre>\n                </td>\n              </tr>\n            );\n          }\n          return (\n            <tr key={i}>\n              <td>{key}</td>\n              <td>{value}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  </>\n);\n\nexport default MetaTable;\n","import React from 'react';\nimport './App.css';\n\nimport JsWebm from 'jswebm';\nimport MetaTable from './MetaTable';\n\nconst videoFile = `${process.env.PUBLIC_URL}/video/Big_Buck_Bunny_4K.webm`;\n\nfunction App() {\n  const [demuxer, setDemuxer] = React.useState(null);\n\n  React.useEffect(() => {\n    fetch(videoFile)\n      .then(res => res.arrayBuffer())\n      .then((buffer) => {\n        const demuxer = new JsWebm();\n        demuxer.queueData(buffer);\n        while (!demuxer.eof) {\n          demuxer.demux();\n        }\n        console.log(demuxer);\n        setDemuxer(demuxer);\n      })\n      .catch(console.log);\n  }, []);\n\n  const renderTracks = () => (\n    <>\n      <h3>Tracks:</h3>\n      {demuxer.tracks.trackEntries.map((trackEntry, i) => (\n        <MetaTable key={i} data={trackEntry} />\n      ))}\n    </>\n  );\n\n  const renderDemuxer = () => (\n    <>\n      <video controls>\n        <source src={videoFile} />\n      </video>\n      <h3>Basic Meta:</h3>\n      <div>\n        <table className=\"demuxer-table\">\n          <tbody>\n            <tr>\n              <th>State</th>\n              <th>Value</th>\n            </tr>\n            <tr>\n              <td>videoFormat</td>\n              <td>\n                <pre>\n                  {JSON.stringify(demuxer.videoFormat, null, 2)}\n                </pre>\n              </td>\n            </tr>\n            <tr>\n              <td>docType</td>\n              <td>{demuxer.docType}</td>\n            </tr>\n            <tr>\n              <td>audioCodec</td>\n              <td>{demuxer.audioCodec}</td>\n            </tr>\n            <tr>\n              <td>videoPackets</td>\n              <td>{demuxer.videoPackets.length}</td>\n            </tr>\n            <tr>\n              <td>audioPackets</td>\n              <td>{demuxer.audioPackets.length}</td>\n            </tr>\n          </tbody>\n        </table>\n        <h3>Segment info:</h3>\n        <div>\n          <MetaTable data={demuxer.segmentInfo} />\n        </div>\n        <h3>Cues:</h3>\n        <div>\n          <MetaTable data={demuxer.cues} />\n        </div>\n        {renderTracks()}\n      </div>\n    </>\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Jswebm</h1>\n      <h2>Demuxing example</h2>\n      {demuxer ? renderDemuxer() : 'Loading...'}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}